service: article-app                      # service name used by Cloudformation to name stacks

frameworkVersion: '3'                     # serverless version v3
                                          # why not v4? - v4 requires SERVERLESS_LICENSE_KEY via Github CI/CD
custom:                                   # define custom params and setting of plugins
  esbuild:                                # configure bundling
    bundle: true
    minify: true
  articleTableName: 'articles-${self:provider.stage}'

provider:
  name: aws                               # aws for cloud infrastructure 
  runtime: nodejs20.x                     # node v20 used in lambdas
  stage: ${opt:stage, 'dev'}              # environment to deploy the app
  region: eu-west-1                       # region where the app is deployed
  memorySize: 512                         # max RAM size allocated to a lambda
  timeout: 30                             # max execution time of a lambda
  versionFunctions: false                 # disable lambda versioning
  tracing:                                # enable tracing for debugging
    apiGateway: true
    lambda: true
  environment:                            # shared env vars for all lambdas
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    ARTICLE_TABLE_NAME: ${self:custom.articleTableName}

package:
  individually: true                      # minimize size of each lambda bundle

plugins:                                  # add plugins for powerful configuration
  - serverless-iam-roles-per-function     # allows setting role on function level
  - serverless-esbuild                    # allows minimize lambdas size and other bundling stuff

functions:                                # define all lambda functions
  - ${file(serverless-functions.yml)}     # import lambdas from external configs to simplify configuration

resources:                                # define all resources that will be created within aws
  Resources:
    ArticlesTable:                        # custom logical name of articles table resource
      Type: AWS::DynamoDB::Table          # define type of created resource: DynamodDB table in our case
      Properties:
        TableName: ${self:custom.articleTableName}
        BillingMode: PAY_PER_REQUEST      # aws will only bill for real requests to dynamodb
        KeySchema:                        # define schema of primary key
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:             # define attributes of primary key
          - AttributeName: id
            AttributeType: S